language: cpp

os: linux
dist: bionic

jobs:
  include:
   # Linux bionic / clang 7
   - env: CC=clang-7 CXX=clang++-7
     addons: { apt: { packages: ["clang-7", "g++-8", "libstdc++-8-dev", "ninja-build"] } }
   
   # Linux bionic / clang 8
   - env: CC=clang-8 CXX=clang++-8
     addons: { apt: { packages: ["clang-8", "g++-8", "libstdc++-8-dev", "ninja-build"] } }
   
   # Linux bionic / clang 9
   - env: CC=clang-9 CXX=clang++-9
     addons: { apt: { packages: ["clang-9", "g++-8", "libstdc++-9-dev", "ninja-build"], sources: [sourceline: "ppa:ubuntu-toolchain-r/test"] } }
   
   # Linux bionic / clang 10
   - env: CC=clang-10 CXX=clang++-10
     addons:
        apt:
           sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
            - sourceline: "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main"
              key_url: "https://apt.llvm.org/llvm-snapshot.gpg.key"
           packages:
            - clang-10
            - libstdc++-10-dev
            - ninja-build
   
   # Linux bionic / GCC 8
   - env: CC=gcc-8 CXX=g++-8
     addons: { apt: { packages: ["g++-8", "ninja-build"] } }
   
   # Linux bionic / GCC 9
   - env: CC=gcc-9 CXX=g++-9
     addons: { apt: { packages: ["g++-9", "ninja-build"], sources: [sourceline: "ppa:ubuntu-toolchain-r/test"] } }
   
   # Linux bionic / GCC 10
   - env: CC=gcc-10 CXX=g++-10
     addons: { apt: { packages: ["g++-10", "ninja-build"], sources: [sourceline: "ppa:ubuntu-toolchain-r/test"] } }

   # Windows / MSVC 2017
   - os: windows

#   # OSX / Clang
#   - os: osx
#     osx_image: xcode11.5
#     addons: { homebrew: { packages: ["ninja"] } }

#   # OSX / GCC
#   - os: osx
#     env: CC=gcc-9 CXX=g++-9
#     addons: { homebrew: { packages: ["ninja", "gcc"] } }
#     osx_image: xcode11.5

install:
  # All the dependencies are installed in ${HOME}/deps/
  - DEPS_DIR="${HOME}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  # Install Cmake 3.15.0
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v3.15/cmake-3.15.0-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    fi
  
before_script:
  # Go back to the root of the project
  - cd "${TRAVIS_BUILD_DIR}"

  # Check versions
  - ${CC} --version
  - ${CXX} --version

  - cmake --version

script:
  # Debug build & test
  - |
    if [[ "${TRAVIS_OS_NAME}" == "windows" ]]; then
        cmake -B Build/Debug -DCMAKE_BUILD_TYPE=Debug -DRFK_DEV=1 -DGEN_PROPERTY_RTTI=1 -G "Visual Studio 15 2017" -A x64
    else
        cmake -B Build/Debug -DCMAKE_BUILD_TYPE=Debug -DRFK_DEV=1 -DGEN_PROPERTY_RTTI=1 -G "Ninja"
    fi

  - cmake --build Build/Debug --config Debug --verbose
  - cd Build/Debug && ctest -C Debug -V

  - cd ../..

  # Release build & test
  - |
    if [[ "${TRAVIS_OS_NAME}" == "windows" ]]; then
        cmake -B Build/Release -DCMAKE_BUILD_TYPE=Release -DRFK_DEV=1 -DGEN_PROPERTY_RTTI=1 -G "Visual Studio 15 2017" -A x64
    else
        cmake -B Build/Release -DCMAKE_BUILD_TYPE=Release -DRFK_DEV=1 -DGEN_PROPERTY_RTTI=1 -G "Ninja"
    fi

  - cmake --build Build/Release --config Release --verbose
  - cd Build/Release && ctest -C Release -V

branches:
  only:
  - master
  - dev

notifications:
  email: false
  slack:
    rooms:
      - secure: 036eCHF+9IlPadO35zdkQRkCTDN5zTamjd5wgZd5G0Or0QOu4vzun9Y9bI0rQKNX/ioKCZ5ZBDGk6HNLyElDI/1Zvvgq0BTYxyRxYQ5aw3a9LAxb60DUzkGsfpVbgAjTQNC69FBAGvamdQBjt90vODB7G7yha421bVDdE/s+ZX+p/msUMNfthhK5JBJ+Ti4MDYZgEuWd+UDlqy5U+njYxJCCUt652Nwn1cHnghtyKliEocjIzRcm/Gd+Q1xt6oXg1oK2oMcwk8OZeNpD38WoNy3oPhN7WfTmlk4nngajRj1Gp7m5+ocgY80tsqu2fFtTzSWwsV3JJaDoicTvF+wWV+d0kGtXT9dJnK+VsDZLNPxTTnrVkzGW9p1bpFLlyUbkUrmPdd/MBBhKcxT0GWgNnSOzQc0Me5x0+WwAnHMnFZVuNDEcpgyhooOKU0y/GNQZI72ZA/o13hunO7S9isc+KaWKAOw/NjddLNXAhYhfcMwvWg07agNIcloJ2dvbJWLowy/DA2fNbKVLVFLqsSkNy5KD7fRPkAuYklkUFAG5mOdQMVdPLueI8FawQ4y0lYFYyAKnJs1a56Qut6aiE/Tu9BATl+kLueKpUKuud8tISIDp7r9rZnB8mFD6ywoIYnIGhiRGF19vECM9FoQpligsU9EwvlepvM7Wh7zFKaNXxX4=
    on_success: always
    on_failure: always